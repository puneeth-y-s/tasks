# This config deploys a Python 3.9 Lambda (main.handle) 
# behind API Gateway, 
# with CORS enabled and Poetry-managed dependencies. 
# Itâ€™s a generic API service (tasks-api) that captures 
# all routes, supports multiple environments 
# (dev, prod), and uses .env for config.
service: tasks-api

frameworkVersion: '3'
# useDotenv: true

provider:
  name: aws
  runtime: python3.11
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'development'}
  logRetentionInDays: 90
  environment:
    APP_ENVIRONMENT: ${self:provider.stage}
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # Allow only access to the API's table and its indexes
        Resource:
        - "Fn::GetAtt": [ TasksAPITable, Arn ]
        - "Fn::Join": [ '/', [ { "Fn::GetAtt": [ TasksAPITable, Arn ] }, 'index', '*' ] ]

functions:
  API:
    handler: main.handle
    timeout: 10
    memorySize: 512
    events:
    - http:
        path: /{proxy+}
        method: any
        cors:
          origin: ${env:ALLOWED_ORIGINS}
          maxAge: 60
        authorizer:
          name: TasksAPIAuthorizer
          type: COGNITO_USER_POOLS
          arn:
            Fn::GetAtt
            - CognitoUserPool
            - Arn

custom:
  pythonRequirements:
    usePoetry: true
    noDeploy:
    - boto3 # already on Lambda
    - botocore # already on Lambda
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-tasks-api

plugins:
- serverless-python-requirements

resources:
- ${file(resources/cognito.yml)}
- ${file(resources/dynamodb.yml)}
